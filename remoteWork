#!/bin/bash

# Copyright (c) 2015, Kim Carter
# All rights reserved.

# This is the script that orchestrates the deployment on the target server.
# If any of it is not clear, please submit a bug and I'll modify the source to be more understandable ;-)
       
logFile="/home/$remoteTargetServerUser/remoteWork-$remoteYearMonthDateHourMin.log"
readonly thisFile="/home/$remoteTargetServerUser/remoteWork"

create_rollback_of_project_hosting_dir() {
   echo "cd'ing into \"${remotePublicWebHostingDir}\""
   cd $remotePublicWebHostingDir && echo "We are now in \"$(pwd)\""
   echo "The \"$(pwd)\" directories listing currently looks like:"
   echo "$(ls -liah)"
   echo
   echo "Now copying \"$remoteProjectHostingDir\" to \"$remoteProjectHostingDir-$remoteYearMonthDateHourMin\""
   cp -r $remoteProjectHostingDir "$remoteProjectHostingDir-$remoteYearMonthDateHourMin" 2>&1
   echo "The \"$(pwd)\" directories listing now looks like:"
   echo "$(ls -liah)"
   echo
}

clear_out_target_hosting_directory() {
   echo "About to delete the contents of \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\""
   echo "The \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\" directory listing currently looks like:"
   echo "$(ls $remotePublicWebHostingDir/$remoteProjectHostingDir/ -liah)"
   echo
   cd "${remotePublicWebHostingDir}/${remoteProjectHostingDir}/"
   echo "We're now in \"$(pwd)/\""
   sudo rm -rfv ${remotePublicWebHostingDir}/${remoteProjectHostingDir}/*
   echo
   echo "After the delete, the \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\" directory listing looks like:"
   echo "$(ls $remotePublicWebHostingDir/$remoteProjectHostingDir/ -liah)"
   echo
}

extract_remoteTaredDeployment_files_to_remoteProjectHostingDir() {
   echo "cd'ing into \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\""
   cd "${remotePublicWebHostingDir}/${remoteProjectHostingDir}/"
   echo "Checking we're in the \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\" directory"
   if [[ "$remotePublicWebHostingDir/$remoteProjectHostingDir" == $(pwd) ]]; then
      echo "... And we are ..."
      echo "Now lets unpack \"/home/$remoteTargetServerUser/$remoteTaredDeployment\" to \"$(pwd)\""
      echo
      sudo tar -zxvf "/home/$remoteTargetServerUser/$remoteTaredDeployment"
   else
      echo "... And we are not! ..."
      echo "Exiting with failure code."
      exit $failure
   fi
   echo "After the unpack, the \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\" directory listing looks like:"
   echo "$(ls $remotePublicWebHostingDir/$remoteProjectHostingDir/ -liah)"
   echo
}

update_file_ownership_and_perms_of_files_in_remoteProjectHostingDir() {
   echo "Attempting to change the ownership and set perms to 550 on all files within \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\""
   echo "cd'ing into \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\""
   cd "${remotePublicWebHostingDir}/${remoteProjectHostingDir}/"
   echo "Checking we're in the \"$remotePublicWebHostingDir/$remoteProjectHostingDir/\" directory"
   if [[ "$remotePublicWebHostingDir/$remoteProjectHostingDir" == $(pwd) ]]; then
      sudo chown -R $remoteProjectHostingUser "$remotePublicWebHostingDir/$remoteProjectHostingDir/" 2>&1
      sudo chmod -R 550 "$remotePublicWebHostingDir/$remoteProjectHostingDir/" 2>&1
      echo "After the change of ownership and perms, the \"$remotePublicWebHostingDir/\" directory listing looks like:"
      echo "$(ls $remotePublicWebHostingDir -liah)"
      echo
      echo "And it's contents looks like:"
      echo "$(ls $remotePublicWebHostingDir/$remoteProjectHostingDir/ -liah)"
   else
      echo "\"$(pwd)\" is not the correct directory"
      echo "Exiting with failure code."
      exit $failure
   fi
   echo
}

restart_webapp() {
   declare -i time=5
   declare -ri maxWait=10

   echo "The $remoteInitUnitFile is currently in the following status:"
   echo "$(systemctl status $remoteInitUnitFile)"
   echo
   echo "Attempting to restart the $remoteInitUnitFile for the first time"
   sudo systemctl restart $remoteInitUnitFile 2>&1
   echo "Waiting for $time seocnds until we check the $remoteInitUnitFile status"
   sleep $time
   echo "Finished waiting now."
   while [[ $(systemctl status $remoteInitUnitFile) != *running* ]] || [[ $time < $maxWait ]] ; do
      echo "The $remoteInitUnitFile is currently in the following status:"
      echo "$(systemctl status $remoteInitUnitFile)"
      echo "Attempting to restart the $remoteInitUnitFile"
      sudo systemctl restart $remoteInitUnitFile 2>&1
      time=$time+1
      if [[ $time -lt $maxWait ]] ; then
         echo "Waiting for $time seocnds until we check the $remoteInitUnitFile status again"
         echo
         sleep $time
      else
         break
      fi
   done
   if [[ $(systemctl status $remoteInitUnitFile) != *running* ]] ; then
      echo "The $remoteInitUnitFile was unable to be started. Please address!"
   else
      echo "Finishing \"restart webapp\". The $remoteInitUnitFile is currently in the following status:"
      echo "$(systemctl status $remoteInitUnitFile)"
   fi
}


create_rollback_of_project_hosting_dir
clear_out_target_hosting_directory
extract_remoteTaredDeployment_files_to_remoteProjectHostingDir
update_file_ownership_and_perms_of_files_in_remoteProjectHostingDir
restart_webapp

